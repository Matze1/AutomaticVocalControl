%-- info	--------------------------------------------------------------
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{shared}[2017/02/21 Shared package for SP templates]

% -- graphics related --
\RequirePackage{graphicx}		% graphicx
\RequirePackage{tikz}
\RequirePackage{pgfplots}
\RequirePackage{import}

% -- latex tools --
\RequirePackage{forloop}

% -- fonts --
\RequirePackage{amssymb, amsmath}
\RequirePackage{wasysym}
\RequirePackage{pifont}

% -- arxiv urls --
\RequirePackage{uri}

% -- acronyms --
\RequirePackage{acro}

% -- algorithms --
\RequirePackage{algorithmic}

% -- misc --
\RequirePackage{stackengine}
\RequirePackage{siunitx}

% -- tables --
\RequirePackage{booktabs}

% -- tikz and pgfplots extensions --
\usetikzlibrary{arrows}
\usetikzlibrary{calc}
\usetikzlibrary{external}
\usetikzlibrary{positioning}
\usetikzlibrary{intersections}
\usetikzlibrary{scopes}
\usetikzlibrary{shapes.arrows}
\usetikzlibrary{shapes.geometric}
\usetikzlibrary{shapes.misc}
\usetikzlibrary{fit}
\usepgfplotslibrary{groupplots}
\usepgfplotslibrary{units}
\usepgfplotslibrary{colormaps}

\pgfplotsset{colormap/hot2, colormap/temp}

% -- define common styles --
\tikzstyle{init} = [pin edge={to-,thin,black}]
\tikzstyle{box} = [rectangle, draw, text centered, rounded corners, fill=uhhblue, text=white]

% -- pgfplots configuration --
\pgfplotsset{%
    compat=1.13,
    tick style={%
        x tick label style={/pgf/number format/1000 sep=},
        y tick label style={/pgf/number format/1000 sep=}
    },
}

% -- algorithmic setup --
\algsetup{indent=2em}

% -- color definitions --
\definecolor{uhhblue}{RGB}{0,156,209}
\definecolor{uhhgreen}{RGB}{66, 178, 60}
\definecolor{uhhred}{RGB}{226,0,26}
\definecolor{uhhblack}{RGB}{0,0,0}
\definecolor{uhhstone}{RGB}{59,81,91}

% -- custom legends in a tikz plot --
% http://tex.stackexchange.com/questions/54794/using-a-pgfplots-style-legend-in-a-plain-old-tikzpicture#54834
% argument #1: any options
\newenvironment{customlegend}[1][]{%
    \begingroup
    % inits/clears the lists (which might be populated from previous
    % axes):
    \csname pgfplots@init@cleared@structures\endcsname
    \pgfplotsset{#1}%
}{%
    % draws the legend:
    \csname pgfplots@createlegend\endcsname
    \endgroup
}%

% makes \addlegendimage available (typically only available within an
% axis environment):
\def\addlegendimage{\csname pgfplots@addlegendimage\endcsname}

% -- retrieve x and y coordinates from node --
\makeatletter
\newcommand{\gettikzxy}[3]{%
  \tikz@scan@one@point\pgfutil@firstofone#1\relax
  \edef#2{\the\pgf@x}%
  \edef#3{\the\pgf@y}%
}
\makeatother

% -- configuration for spectrogram generation --
\newcounter{colormap_cnt}%
\newcounter{filecnt}

\makeatletter

\newread\sp@handle%

\newenvironment{spimportenv}[1]{%
    % remember old paths
    \pgfkeysgetvalue{/pgfplots/table/search path}{\sp@oldpgfpath}% path for PGF
    \edef\sp@newpgfpath{\sp@oldpgfpath,#1}
    \edef\sp@oldpath{\@ifundefined{input@path}{}{\input@path}}% latex path
    \edef\sp@oldGpath{\@ifundefined{Ginput@path}{}{\Ginput@path}}% graphics path
    % set new paths
    \pgfkeyslet{/pgfplots/table/search path}{\sp@newpgfpath}%
    \def\input@path{{#1}\sp@oldpath}%
    \def\Ginput@path{{#1}\sp@oldGpath}%
}{%
    \pgfkeyslet{/pgfplots/table/search path}{\sp@oldpgfpath}%
    \def\input@path{\sp@oldpath}\ifx\input@path\@empty \let\input@path\@undefined \fi%
    \def\Ginput@path{\sp@oldGpath}\ifx\Ginput@path\@empty \let\Ginput@path\@undefined \fi%
}

\def\sp@findpath#1{%
    % read parameters from data
    \openin\sp@handle=#1%
        \edef\sp@filename{#1}%
    \ifeof\sp@handle%
        % indicator to check for new paths
        \def\sp@searchdone{0}%
        % get paths given pgfplots search paths
        \pgfkeysgetvalue{/pgfplots/table/search path}{\sp@paths}%
        \@for\sp@path:=\sp@paths\do{%
            \if0\sp@searchdone%
                % construct path + filename
                \edef\sp@filename{\sp@path/#1}%
                \message{Testing: \sp@filename}%
                \openin\sp@handle=\sp@filename%
                \ifeof\sp@handle%
                \else%
                    \def\sp@seachdone{1}%
                    \edef\sp@filename{\sp@filename}%
                \fi%
            \fi%
        }%
    \else%
        % use filename directly if file could be opened
        \edef\sp@filename{#1}%
    \fi%
}%


\def\imsc@globalpath{.}

\newcommand{\imagesc}[2][]{%
    % get color triplets
    \pgfkeysgetvalue{/pgfplots/colormap name}{\imsc@cmname}%
    \pgfplotsarraysizetomacro{pgfpl@cm@\imsc@cmname}\to\imsc@arraysize%
    \setcounter{colormap_cnt}{0}
    \edef\imsc@colorstring{}%
    \forloop{colormap_cnt}{0}{\value{colormap_cnt} < \imsc@arraysize}{%
        \pgfplotscolormapgetindex{\arabic{colormap_cnt}}{\imsc@cmname}%
        \edef\imsc@colorstring{\imsc@colorstring \pgfmathresult;}%
    }%

    \sp@findpath{#2}
    \read\sp@handle to \imsc@trash
    \read\sp@handle to \imsc@trash
    \read\sp@handle to \imsc@xmin
    \read\sp@handle to \imsc@xmax
    \read\sp@handle to \imsc@ymin
    \read\sp@handle to \imsc@ymax
    \read\sp@handle to \imsc@datapmin
    \read\sp@handle to \imsc@datapmax
    \closein\sp@handle%
    % check if point meta has been specified
    \pgfkeysgetvalue{/pgfplots/point meta min}{\imsc@stylepmin}
    \ifx\empty\imsc@stylepmin%
    \edef\imsc@pmin{\imsc@datapmin}
    \else
    \edef\imsc@pmin{\imsc@stylepmin}
    \fi
    \pgfkeysgetvalue{/pgfplots/point meta max}{\imsc@stylepmax}
    \ifx\empty\imsc@stylepmax%
    \edef\imsc@pmax{\imsc@datapmax}
    \else
    \edef\imsc@pmax{\imsc@stylepmax}
    \fi
    % set file output
    \edef\imsc@filecnt{\thefilecnt}

    \tikzifexternalizing{\tikzexternalgetnextfilename\filename\eappto\filename{-\imsc@filecnt}}{\edef\filename{\imsc@globalpath/\jobname-\imsc@filecnt}}

    \immediate\write18{python3 shared/imagesc.py '\sp@filename' '\imsc@colorstring' '\imsc@pmin' '\imsc@pmax' '\filename.png'}%
    \addplot[point meta min=\imsc@pmin, point meta max=\imsc@pmax, #1] graphics [xmin=\imsc@xmin, xmax=\imsc@xmax, ymin=\imsc@ymin, ymax=\imsc@ymax] {\filename.png};
    \stepcounter{filecnt}
}

\newcommand{\setimagescpath}[1]{\edef\imsc@globalpath{#1}}

\newcommand{\spimport}[2]{%
    \pgfkeysgetvalue{/pgfplots/table/search path}{\sp@oldpath}%
    \edef\sp@newpath{\sp@oldpath,#1}
    \pgfkeyslet{/pgfplots/table/search path}{\sp@newpath}%
    \import{#1}{#2}%
    \pgfkeyslet{/pgfplots/table/search path}{\sp@oldpath}%
}

\makeatother


\pgfplotsset{%
    colormap={parula}{%
        rgb255=(53,42,135)
        rgb255=(15,92,221)
        rgb255=(18,125,216)
        rgb255=(7,156,207)
        rgb255=(21,177,180)
        rgb255=(89,189,140)
        rgb255=(165,190,107)
        rgb255=(225,185,82)
        rgb255=(252,206,46)
        rgb255=(249,251,14)
    },
    colormap={hotinv}{%
        [1cm]rgb255(0cm)=(255,255,255)
        rgb255(2cm)=(255,255,0)
        rgb255(5cm)=(255,0,0)
        rgb255(8cm)=(0,0,0)
    },
}

% -- marks for enumerations --
\newcommand{\cmark}{\color{uhhgreen}{\ding{52}}}
\newcommand{\xmark}{\color{uhhred}{\ding{54}}}
\newcommand{\filledrightarrow}[1][]{%
    \tikz{%
        \node[rounded corners=0pt,
            single arrow,
            fill,
            single arrow head extend=0.25ex,
            inner sep=0.1ex,
            minimum height=0.65em,
            minimum width=1.25ex,
            #1] {};
        }%
    }
